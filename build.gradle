plugins {
    id "java"
    id "application"
    id "org.openjfx.javafxplugin" version "0.0.8"
    id "de.undercouch.download" version "4.1.1"
    id "org.sonarqube" version "3.5.0.2730"
}

version = "0.1.0"
sourceCompatibility = 11

sonarqube {
    properties {
        property "sonar.projectKey", "Xceron_FST-22-Gradle-CI"
        property "sonar.organization", "xceron"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

javafx {
    version = "11"
    modules = ["javafx.controls"]
}

repositories {
    mavenCentral()
}


dependencies {
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10'
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation 'junit:junit:4.13.2'
}

task downloadZip(type: Download) {
    src "https://datahub.io/core/covid-19/r/covid-19_zip.zip"
    dest buildDir
    onlyIfModified true
}

task unzip(type: Copy, dependsOn:  downloadZip) {
    def zipFile = file("$buildDir/covid-19_zip.zip")
    def outputDir = file("$buildDir/zips/unpacked/")

    from zipTree(zipFile)
    into outputDir
}

task copyJson(type: Copy, dependsOn: unzip) {
    def jsonFile = file("$buildDir/zips/unpacked/data/countries-aggregated_json.json")
    def resourceFolder = file("src/main/resources")

    from jsonFile
    into resourceFolder
}

task buildCore(dependsOn: copyJson) {
    doLast {
        sourceSets {
            main {
                java {
                    srcDir "main"
                    exclude "**/ui/*.java"
                }
            }
            test {
                java {
                    srcDir "test"
                    include "**/core/**.java"
                }
            }
        }
    }
    finalizedBy(build)
}

task buildUI(dependsOn: copyJson) {
    doLast {
        sourceSets {
            main {
                java {
                    srcDir "main"
                }
            }
        }
    }
    finalizedBy(build)
}

task runCore(dependsOn: buildCore) {
    doLast {
        mainClassName = "de.unitrier.st.core.Main"
    }
    finalizedBy(run)
}

task runUI(dependsOn: buildUI) {
    doLast {
        mainClassName = "de.unitrier.st.ui.Ui"
    }
    finalizedBy(run)
}
